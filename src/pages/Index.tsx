import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import Icon from '@/components/ui/icon';

interface Emotion {
  id: string;
  name: string;
  emoji: string;
  description: string;
  color: string;
  gradient: string;
}

interface CartItem {
  emotionId: string;
  quantity: number;
}

const emotions: Emotion[] = [
  // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
  { id: 'love', name: '–õ—é–±–æ–≤—å', emoji: '‚ù§Ô∏è', description: '–ì–ª—É–±–æ–∫–æ–µ —á—É–≤—Å—Ç–≤–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', color: 'bg-red-200', gradient: 'from-red-200 to-pink-200' },
  { id: 'joy', name: '–†–∞–¥–æ—Å—Ç—å', emoji: 'üòÑ', description: '–Ø—Ä–∫–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ', color: 'bg-yellow-200', gradient: 'from-yellow-200 to-orange-200' },
  { id: 'happiness', name: '–°—á–∞—Å—Ç—å–µ', emoji: 'üòä', description: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è', color: 'bg-green-200', gradient: 'from-green-200 to-lime-200' },
  { id: 'admiration', name: '–í–æ—Å—Ö–∏—â–µ–Ω–∏–µ', emoji: 'ü§©', description: '–ß—É–≤—Å—Ç–≤–æ –≥–ª—É–±–æ–∫–æ–≥–æ —É–≤–∞–∂–µ–Ω–∏—è', color: 'bg-purple-200', gradient: 'from-purple-200 to-violet-200' },
  { id: 'pleasure', name: '–£–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ', emoji: 'üòå', description: '–ü—Ä–∏—è—Ç–Ω–æ–µ –æ—â—É—â–µ–Ω–∏–µ', color: 'bg-pink-200', gradient: 'from-pink-200 to-rose-200' },
  { id: 'peace', name: '–£–º–∏—Ä–æ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å', emoji: 'üïäÔ∏è', description: '–ì–ª—É–±–æ–∫–æ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', color: 'bg-blue-200', gradient: 'from-blue-200 to-sky-200' },
  { id: 'pride', name: '–ì–æ—Ä–¥–æ—Å—Ç—å', emoji: 'üò§', description: '–ß—É–≤—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞', color: 'bg-indigo-200', gradient: 'from-indigo-200 to-blue-200' },
  { id: 'confidence', name: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', emoji: 'üí™', description: '–í–µ—Ä–∞ –≤ —Å–≤–æ–∏ —Å–∏–ª—ã', color: 'bg-emerald-200', gradient: 'from-emerald-200 to-green-200' },
  { id: 'compassion', name: '–°–æ—á—É–≤—Å—Ç–≤–∏–µ', emoji: 'ü§ó', description: '–ü–æ–Ω–∏–º–∞–Ω–∏–µ —á—É–∂–æ–π –±–æ–ª–∏', color: 'bg-teal-200', gradient: 'from-teal-200 to-cyan-200' },
  { id: 'empathy', name: '–°–æ—á—É–≤—Å—Ç–≤–∏–µ (—ç–º–ø–∞—Ç–∏—è)', emoji: 'üíú', description: '–ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö', color: 'bg-violet-200', gradient: 'from-violet-200 to-purple-200' },
  { id: 'sympathy', name: '–°–æ—á—É–≤—Å—Ç–≤–∏–µ (—Å–∏–º–ø–∞—Ç–∏—è)', emoji: 'üíô', description: '–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ', color: 'bg-cyan-200', gradient: 'from-cyan-200 to-blue-200' },
  { id: 'compassion2', name: '–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ', emoji: 'ü§≤', description: '–ñ–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å —Å—Ç—Ä–∞–¥–∞—é—â–µ–º—É', color: 'bg-amber-200', gradient: 'from-amber-200 to-yellow-200' },
  { id: 'trust', name: '–î–æ–≤–µ—Ä–∏–µ', emoji: 'ü§ù', description: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏', color: 'bg-lime-200', gradient: 'from-lime-200 to-green-200' },
  { id: 'gratitude', name: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', emoji: 'üôè', description: '–ü—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ –¥–æ–±—Ä–æ—Ç—É', color: 'bg-orange-200', gradient: 'from-orange-200 to-yellow-200' },
  { id: 'warmth', name: '–¢–µ–ø–ª–æ—Ç–∞', emoji: '‚òÄÔ∏è', description: '–î—É—à–µ–≤–Ω–æ–µ —Ç–µ–ø–ª–æ', color: 'bg-red-100', gradient: 'from-red-100 to-orange-100' },
  { id: 'care', name: '–ó–∞–±–æ—Ç–∞', emoji: 'ü§±', description: '–í–Ω–∏–º–∞–Ω–∏–µ –∫ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é –¥—Ä—É–≥–∏—Ö', color: 'bg-green-100', gradient: 'from-green-100 to-emerald-100' },
  
  // –ü–µ—á–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
  { id: 'longing', name: '–¢–æ—Å–∫–∞', emoji: 'üòî', description: '–ì–ª—É–±–æ–∫–∞—è –ø–µ—á–∞–ª—å –ø–æ —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–º—É', color: 'bg-slate-300', gradient: 'from-slate-300 to-gray-300' },
  { id: 'nostalgia', name: '–ù–æ—Å—Ç–∞–ª—å–≥–∏—è', emoji: 'üåÖ', description: '–ì—Ä—É—Å—Ç–Ω–∞—è —Ç–æ—Å–∫–∞ –ø–æ –ø—Ä–æ—à–ª–æ–º—É', color: 'bg-amber-300', gradient: 'from-amber-300 to-orange-300' },
  { id: 'sadness', name: '–ì—Ä—É—Å—Ç—å', emoji: 'üò¢', description: '–ß—É–≤—Å—Ç–≤–æ –ø–µ—á–∞–ª–∏', color: 'bg-blue-300', gradient: 'from-blue-300 to-indigo-300' },
  { id: 'sorrow', name: '–ü–µ—á–∞–ª—å', emoji: 'üòø', description: '–ì–ª—É–±–æ–∫–∞—è –≥—Ä—É—Å—Ç—å', color: 'bg-gray-300', gradient: 'from-gray-300 to-slate-300' },
  { id: 'upset', name: '–û–≥–æ—Ä—á–µ–Ω–∏–µ', emoji: 'üòû', description: '–†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç –Ω–µ—É–¥–∞—á–∏', color: 'bg-stone-300', gradient: 'from-stone-300 to-gray-300' },
  { id: 'disappointment', name: '–†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', emoji: 'üòï', description: '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º', color: 'bg-zinc-300', gradient: 'from-zinc-300 to-gray-300' },
  
  // –¢—Ä–µ–≤–æ–∂–Ω—ã–µ —ç–º–æ—Ü–∏–∏
  { id: 'anxiety', name: '–¢—Ä–µ–≤–æ–≥–∞', emoji: 'üò∞', description: '–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –æ –±—É–¥—É—â–µ–º', color: 'bg-yellow-300', gradient: 'from-yellow-300 to-amber-300' },
  { id: 'fear', name: '–°—Ç—Ä–∞—Ö', emoji: 'üò®', description: '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏', color: 'bg-purple-300', gradient: 'from-purple-300 to-violet-300' },
  { id: 'horror', name: '–£–∂–∞—Å', emoji: 'üò±', description: '–ö—Ä–∞–π–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å —Å—Ç—Ä–∞—Ö–∞', color: 'bg-red-400', gradient: 'from-red-400 to-pink-400' },
  { id: 'nervousness', name: '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', emoji: 'üò¨', description: '–ù–µ—Ä–≤–Ω–æ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', color: 'bg-lime-300', gradient: 'from-lime-300 to-yellow-300' },
  { id: 'insecurity', name: '–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', emoji: 'üòü', description: '–°–æ–º–Ω–µ–Ω–∏–µ –≤ —Å–µ–±–µ', color: 'bg-cyan-300', gradient: 'from-cyan-300 to-blue-300' },
  { id: 'shame', name: '–°—Ç—ã–¥', emoji: 'üò≥', description: '–ß—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∑–∞ –ø–æ—Å—Ç—É–ø–æ–∫', color: 'bg-pink-300', gradient: 'from-pink-300 to-red-300' },
  { id: 'guilt', name: '–í–∏–Ω–∞', emoji: 'üò£', description: '–û—Å–æ–∑–Ω–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏', color: 'bg-rose-300', gradient: 'from-rose-300 to-pink-300' },
  { id: 'embarrassment', name: '–°–º—É—â–µ–Ω–∏–µ', emoji: 'üòä', description: '–ù–µ–ª–æ–≤–∫–æ—Å—Ç—å –≤ —Å–∏—Ç—É–∞—Ü–∏–∏', color: 'bg-orange-300', gradient: 'from-orange-300 to-red-300' },
  
  // –ì–Ω–µ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
  { id: 'anger', name: '–ó–ª–æ—Å—Ç—å', emoji: 'üò†', description: '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ', color: 'bg-red-300', gradient: 'from-red-300 to-orange-300' },
  { id: 'rage', name: '–ì–Ω–µ–≤', emoji: 'üò°', description: '–°–∏–ª—å–Ω–∞—è —è—Ä–æ—Å—Ç—å', color: 'bg-red-400', gradient: 'from-red-400 to-red-500' },
  { id: 'irritation', name: '–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', emoji: 'üò§', description: '–ú–µ–ª–∫–æ–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', color: 'bg-orange-400', gradient: 'from-orange-400 to-red-400' },
  { id: 'disgust', name: '–û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ', emoji: 'ü§¢', description: '–°–∏–ª—å–Ω–æ–µ –Ω–µ–ø—Ä–∏—è—Ç–∏–µ', color: 'bg-green-400', gradient: 'from-green-400 to-lime-400' },
  { id: 'contempt', name: '–ü—Ä–µ–∑—Ä–µ–Ω–∏–µ', emoji: 'üòí', description: '–ü—Ä–µ–Ω–µ–±—Ä–µ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ', color: 'bg-slate-400', gradient: 'from-slate-400 to-gray-400' },
  { id: 'hatred', name: '–ù–µ–Ω–∞–≤–∏—Å—Ç—å', emoji: 'üòà', description: '–ö—Ä–∞–π–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å –Ω–µ–ø—Ä–∏—è–∑–Ω–∏', color: 'bg-black', gradient: 'from-gray-600 to-black' },
  { id: 'envy', name: '–ó–∞–≤–∏—Å—Ç—å', emoji: 'üòè', description: '–ñ–µ–ª–∞–Ω–∏–µ —á—É–∂–æ–≥–æ —É—Å–ø–µ—Ö–∞', color: 'bg-emerald-400', gradient: 'from-emerald-400 to-green-400' },
  { id: 'jealousy', name: '–†–µ–≤–Ω–æ—Å—Ç—å', emoji: 'üòæ', description: '–°—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å –ª—é–±–∏–º–æ–≥–æ', color: 'bg-yellow-400', gradient: 'from-yellow-400 to-orange-400' },
  
  // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ/–¥—Ä—É–≥–∏–µ —ç–º–æ—Ü–∏–∏
  { id: 'security', name: '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (—á—É–≤—Å—Ç–≤–æ –∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç–∏)', emoji: 'üõ°Ô∏è', description: '–û—â—É—â–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', color: 'bg-blue-100', gradient: 'from-blue-100 to-indigo-100' },
  { id: 'fatigue', name: '–£—Å—Ç–∞–ª–æ—Å—Ç—å', emoji: 'üò¥', description: '–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∏ –º–æ—Ä–∞–ª—å–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ', color: 'bg-gray-400', gradient: 'from-gray-400 to-slate-400' },
  { id: 'powerlessness', name: '–ë–µ—Å—Å–∏–ª–∏–µ', emoji: 'üòµ', description: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å', color: 'bg-zinc-400', gradient: 'from-zinc-400 to-gray-400' },
  { id: 'apathy', name: '–ê–ø–∞—Ç–∏—è', emoji: 'üòë', description: '–ë–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ –∫–æ –≤—Å–µ–º—É', color: 'bg-stone-400', gradient: 'from-stone-400 to-gray-400' },
  { id: 'loneliness', name: '–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', emoji: 'üòû', description: '–ß—É–≤—Å—Ç–≤–æ –∏–∑–æ–ª—è—Ü–∏–∏', color: 'bg-indigo-300', gradient: 'from-indigo-300 to-purple-300' },
  { id: 'isolation', name: '–ò–∑–æ–ª—è—Ü–∏—è', emoji: 'üèùÔ∏è', description: '–û—Ç—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–æ—Å—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö', color: 'bg-teal-300', gradient: 'from-teal-300 to-cyan-300' },
  { id: 'boredom', name: '–°–∫—É–∫–∞', emoji: 'üòê', description: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞', color: 'bg-neutral-300', gradient: 'from-neutral-300 to-gray-300' },
  { id: 'satisfaction', name: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ', emoji: 'üòå', description: '–ß—É–≤—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞', color: 'bg-green-300', gradient: 'from-green-300 to-emerald-300' },
  { id: 'surprise', name: '–£–¥–∏–≤–ª–µ–Ω–∏–µ', emoji: 'üòÆ', description: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è', color: 'bg-yellow-100', gradient: 'from-yellow-100 to-orange-100' },
  { id: 'shock', name: '–®–æ–∫', emoji: 'üò≤', description: '–°–∏–ª—å–Ω–æ–µ –ø–æ—Ç—Ä—è—Å–µ–Ω–∏–µ', color: 'bg-purple-400', gradient: 'from-purple-400 to-violet-400' }
];

const PRICE_PER_UNIT = 1000;

export default function Index() {
  const [cart, setCart] = useState<CartItem[]>([]);
  const [isCartOpen, setIsCartOpen] = useState(false);

  const addToCart = (emotionId: string) => {
    setCart(prev => {
      const existing = prev.find(item => item.emotionId === emotionId);
      if (existing && existing.quantity < 20) {
        return prev.map(item =>
          item.emotionId === emotionId
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else if (!existing) {
        return [...prev, { emotionId, quantity: 1 }];
      }
      return prev;
    });
  };

  const removeFromCart = (emotionId: string) => {
    setCart(prev => {
      const existing = prev.find(item => item.emotionId === emotionId);
      if (existing && existing.quantity > 1) {
        return prev.map(item =>
          item.emotionId === emotionId
            ? { ...item, quantity: item.quantity - 1 }
            : item
        );
      } else {
        return prev.filter(item => item.emotionId !== emotionId);
      }
    });
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + (item.quantity * PRICE_PER_UNIT), 0);
  };

  const getEmotionQuantity = (emotionId: string) => {
    return cart.find(item => item.emotionId === emotionId)?.quantity || 0;
  };

  const getCartItemsCount = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-purple-50 to-blue-50">
      {/* Header */}
      <header className="sticky top-0 z-50 bg-white/80 backdrop-blur-lg border-b border-primary/10">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="text-3xl">
                <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 2L15.09 8.26L22 9L17 14L18.18 21L12 17.77L5.82 21L7 14L2 9L8.91 8.26L12 2Z"/>
                </svg>
              </div>
              <div>
                <h1 className="font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-[#000000] text-4xl">
                  –ú–∞–≥–∞–∑–∏–Ω –≠–º–æ—Ü–∏–π
                </h1>
                <p className="text-[#000000] font-medium text-lg">–≠—Ñ–µ–º–µ—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥—É—à–∏</p>
              </div>
            </div>
            
            <Button
              variant="outline"
              className="relative hover:scale-105 transition-transform"
              onClick={() => setIsCartOpen(!isCartOpen)}
            >
              <Icon name="ShoppingCart" size={20} />
              <span className="ml-2">–ö–æ—Ä–∑–∏–Ω–∞</span>
              {getCartItemsCount() > 0 && (
                <Badge className="absolute -top-2 -right-2 bg-primary text-primary-foreground">
                  {getCartItemsCount()}
                </Badge>
              )}
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-6 py-12 bg-slate-300">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-accent bg-clip-text text-[#000000]">
            –ö–∞—Ç–∞–ª–æ–≥ –ß—É–≤—Å—Ç–≤ –∏ –≠–º–æ—Ü–∏–π
          </h2>
          <p className="text-lg max-w-2xl mx-auto text-[#000000]">
            –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å. –ö–∞–∂–¥–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç 1000‚ÇΩ, –º–∞–∫—Å–∏–º—É–º 20 –¥–µ–ª–µ–Ω–∏–π –Ω–∞ —ç–º–æ—Ü–∏—é.
          </p>
        </div>

        {/* Emotions Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {emotions.map((emotion) => (
            <Card key={emotion.id} className="group hover:shadow-md transition-all duration-200 border-2 border-gray-600 bg-gray-200">
              <CardHeader className="text-center pb-4">
                <div className={`w-20 h-20 mx-auto rounded-full bg-gradient-to-br ${emotion.gradient} flex items-center justify-center text-4xl mb-4 group-hover:scale-110 transition-transform border-2 border-black`}>
                  {emotion.emoji}
                </div>
                <CardTitle className="text-xl font-semibold">{emotion.name}</CardTitle>
                <CardDescription className="text-sm">{emotion.description}</CardDescription>
              </CardHeader>
              
              <CardContent className="space-y-4">
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–ø–æ–ª–æ—Å–∫–∏) */}
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">–î–æ—Å—Ç—É–ø–Ω–æ:</span>
                    <span className="text-sm font-semibold">{20 - getEmotionQuantity(emotion.id)}/20</span>
                  </div>
                  <div className="flex border-2 border-black rounded overflow-hidden h-4 bg-orange-400">
                    {Array.from({ length: 20 }, (_, index) => {
                      const isAvailable = index < (20 - getEmotionQuantity(emotion.id));
                      
                      return (
                        <div
                          key={index}
                          className={`flex-1 transition-all duration-200 border-r border-border last:border-r-0 ${
                            isAvailable
                              ? emotion.color.replace('bg-', 'bg-').replace('-200', '-500')
                              : 'bg-gray-200'
                          }`}
                        />
                      );
                    })}
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <span className="text-sm font-medium">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                  <div className="flex items-center gap-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => removeFromCart(emotion.id)}
                      disabled={getEmotionQuantity(emotion.id) === 0}
                      className="h-8 w-8 p-0"
                    >
                      <Icon name="Minus" size={16} />
                    </Button>
                    <span className="w-8 text-center font-semibold">
                      {getEmotionQuantity(emotion.id)}
                    </span>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => addToCart(emotion.id)}
                      disabled={getEmotionQuantity(emotion.id) >= 20}
                      className="h-8 w-8 p-0"
                    >
                      <Icon name="Plus" size={16} />
                    </Button>
                  </div>
                </div>
                
                <div className="text-center">
                  <p className="text-sm text-muted-foreground">
                    {getEmotionQuantity(emotion.id) * PRICE_PER_UNIT} ‚ÇΩ
                  </p>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Cart Section */}
        {isCartOpen && (
          <Card className="max-w-2xl mx-auto shadow-2xl border-0">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Icon name="ShoppingCart" size={24} />
                –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫
              </CardTitle>
              <CardDescription>
                –í–∞—à–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏
              </CardDescription>
            </CardHeader>
            
            <CardContent>
              {cart.length === 0 ? (
                <div className="text-center py-8 text-muted-foreground">
                  <Icon name="ShoppingCart" size={48} className="mx-auto mb-4 opacity-50" />
                  <p>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {cart.map(item => {
                    const emotion = emotions.find(e => e.id === item.emotionId)!;
                    return (
                      <div key={item.emotionId} className="flex items-center justify-between p-4 bg-muted/50 rounded-lg">
                        <div className="flex items-center gap-3">
                          <span className="text-2xl">{emotion.emoji}</span>
                          <div>
                            <h4 className="font-medium">{emotion.name}</h4>
                            <p className="text-sm text-muted-foreground">
                              {item.quantity} √ó {PRICE_PER_UNIT} ‚ÇΩ
                            </p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold">{item.quantity * PRICE_PER_UNIT} ‚ÇΩ</p>
                        </div>
                      </div>
                    );
                  })}
                  
                  <Separator />
                  
                  <div className="flex items-center justify-between text-lg font-bold">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span>{getTotalPrice().toLocaleString()} ‚ÇΩ</span>
                  </div>
                  
                  <Button className="w-full mt-6" size="lg">
                    <Icon name="CreditCard" size={20} className="mr-2" />
                    –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}